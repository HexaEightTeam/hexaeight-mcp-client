"""
Enhanced License activation CLI for HexaEight MCP Client
"""

import os
import subprocess
from typing import List
from .utils import (
    download_machine_token_utility,
    print_section, 
    confirm_action,
    save_package_state
)

class LicenseActivationCLI:
    """CLI for license activation using machine token utility"""
    
    def run(self, args: List[str]) -> None:
        """Run license activation process"""
        
        print_section(
            "HexaEight License Activation",
            "This will set up the machine token utility for license activation."
        )
        
        # Check current directory
        current_dir = os.getcwd()
        print(f"üìÅ Current directory: {current_dir}")
        
        # Warn about license file location
        print(f"\n‚ö†Ô∏è  IMPORTANT: License File Location")
        print(f"   ‚Ä¢ The license file (hexaeight.mac) will be created in: {current_dir}")
        print(f"   ‚Ä¢ Once created, it CANNOT be moved to another location")
        print(f"   ‚Ä¢ Only hardlinks can be created to reference it from other directories")
        print(f"   ‚Ä¢ Make sure this is the correct directory for your license file")
        
        if not confirm_action("Continue with license activation setup in this directory?"):
            print("üëã License activation cancelled")
            return
        
        try:
            # Step 1: Extract machine token utility
            executable_path = self._extract_utility()
            
            # Step 2: Run system verification
            self._run_system_verification(executable_path)
            
            # Step 3: Guide through purchase and activation
            self._guide_license_purchase_and_activation(executable_path)
            
        except Exception as e:
            print(f"‚ùå License activation setup failed: {e}")
            raise
    
    def _extract_utility(self) -> str:
        """Extract and setup machine token utility"""
        executable_path = download_machine_token_utility()
        
        # Save license directory for future reference
        save_package_state("license_directory", os.getcwd())
        
        print_section("Machine Token Utility Ready")
        print(f"‚úÖ Machine token utility extracted: {executable_path}")
        print(f"üìÅ Working directory: {os.getcwd()}")
        
        return executable_path
    
    def _run_system_verification(self, executable_path: str) -> None:
        """Run system verification checks"""
        
        print_section("System Verification", "Checking your system for license compatibility...")
        
        # Always run CPU check
        print(f"üîç Step 1: Checking CPU cores for license sizing...")
        if confirm_action("Check CPU cores now?", default=True):
            self._run_cpu_check(executable_path)
        
        print(f"\nüîç Step 2: Verifying environment compatibility...")
        if confirm_action("Verify environment now?", default=True):
            self._run_environment_check(executable_path)
        
        print_section("‚úÖ System Verification Complete", "Your system is ready for HexaEight license activation!")
    
    def _guide_license_purchase_and_activation(self, executable_path: str) -> None:
        """Guide user through license purchase and activation"""
        
        print_section("AI Agent Identity & License Setup", "Understanding the HexaEight AI Agent Identity System...")
        
        # Explain the concept
        self._explain_agent_identity_concept()
        
        # Guide through domain setup
        self._guide_domain_setup()
        
        # Explain the value proposition
        self._explain_license_value_proposition()
        
        # Show activation process
        self._show_activation_process(executable_path)
    def _start_license_activation(self, executable_path: str) -> None:
        """Start interactive license activation"""
        
        print_section("üöÄ License Activation", "Activating your AI agent identity license...")
        
        print(f"üîë **License Activation Process Starting**")
        print(f"")
        print(f"The machine token utility will now:")
        print(f"   1. üî§ Ask for your resource name (e.g., weather-agent.yourdomain.com)")
        print(f"   2. üì± Display a QR code URL for verification")
        print(f"   3. ‚è≥ Wait for your approval via HexaEight Authenticator app")
        print(f"   4. ‚úÖ Create your license file upon verification")
        print(f"")
        print(f"üìã Running: {os.path.basename(executable_path)} --newtoken")
        print(f"=" * 60)
        
        try:
            # Run license activation interactively
            result = subprocess.run([executable_path, "--newtoken"], check=True)
            
            print(f"=" * 60)
            print_section("üéâ License Activation Complete!")
            
            # Check if license file was created
            license_file = os.path.join(os.getcwd(), "hexaeight.mac")
            if os.path.exists(license_file):
                print(f"‚úÖ License file created: {license_file}")
                print(f"üîí This file contains your HexaEight AI agent license")
                print(f"‚ö†Ô∏è  Keep this file secure and do not move it from this directory")
                
                # Show the exciting next steps
                self._show_license_success_next_steps()
            else:
                print(f"‚ö†Ô∏è  License file not found - activation may have failed")
                print(f"üí° Check the output above for any error messages")
                print(f"üîÑ You can try again with: ./{os.path.basename(executable_path)} --newtoken")
        
        except subprocess.CalledProcessError as e:
            print(f"=" * 60)
            print(f"‚ùå License activation failed with exit code: {e.returncode}")
            print(f"üí° Please check the error messages above")
            print(f"üîÑ You can try again with: ./{os.path.basename(executable_path)} --newtoken")
        
        except KeyboardInterrupt:
            print(f"\nüëã License activation cancelled by user")
            print(f"üí° You can resume anytime with: ./{os.path.basename(executable_path)} --newtoken")
        
        except Exception as e:
            print(f"‚ùå License activation error: {e}")
    
    def _show_license_success_next_steps(self) -> None:
        """Show exciting next steps after successful license activation"""
        
        print_section("üöÄ Your AI Agent Empire Begins Now!", "What you can do with your new license...")
        
        print(f"üéä **Congratulations! Your AI Agent License is Active!**")
        print(f"")
        print(f"üí™ **You Now Have Super Powers:**")
        print(f"")
        print(f"üè¢ **Immediate Actions Available:**")
        print(f"   1. üéØ Create Parent Agent (runs on this machine)")
        print(f"      hexaeight-start generate-parent-or-child-agent-licenses")
        print(f"")
        print(f"   2. üèóÔ∏è  Create Project Directories")
        print(f"      hexaeight-create directory-linked-to-hexaeight-license my-ai-project")
        print(f"")
        print(f"   3. üå§Ô∏è  Deploy Sample Multi-Agent Weather System")
        print(f"      hexaeight-deploy multi-ai-agent-samples")
        print(f"")
        print(f"üë• **Start Building Your Agent Army:**")
        print(f"   ‚Ä¢ Create parent agent config (machine-bound, no password)")
        print(f"   ‚Ä¢ Generate unlimited child agents (32+ char passwords)")
        print(f"   ‚Ä¢ Deploy child agents to cloud, edge devices, anywhere!")
        print(f"   ‚Ä¢ Build secure multi-agent AI applications")
        print(f"")
        print(f"üåü **Remember the Strategy:**")
        print(f"   ‚è∞ License Duration: Limited time to create agents")
        print(f"   üë• Child Agents: Unlimited creation during license period")
        print(f"   ‚ôæÔ∏è  Child Longevity: Work forever, even after license expires")
        print(f"   üíé Value: Permanent AI infrastructure from temporary license")
        print(f"")
        print(f"üöÄ **Recommended First Steps:**")
        print(f"   1. Create a parent agent configuration")
        print(f"   2. Create 5-10 child agents immediately")
        print(f"   3. Test the sample weather system")
        print(f"   4. Build your own AI applications")
        print(f"")
        print(f"üéØ **Your license directory:** {os.getcwd()}")
        print(f"üí™ **Time to build the future!**")
    
    def _run_cpu_check(self, executable_path: str) -> None:
        """Run CPU cores check"""
        try:
            print(f"üìã Command: {os.path.basename(executable_path)} --cpucores")
            print(f"=" * 50)
            
            # Run without capturing output - let it run interactively
            result = subprocess.run([executable_path, "--cpucores"], check=True)
            
            print(f"=" * 50)
            print(f"‚úÖ CPU check completed")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå CPU check failed with exit code: {e.returncode}")
        except Exception as e:
            print(f"‚ùå CPU check error: {e}")
    
    def _run_environment_check(self, executable_path: str) -> None:
        """Run environment verification"""
        try:
            print(f"üìã Command: {os.path.basename(executable_path)} --verifyenvironment")
            print(f"=" * 50)
            
            # Run without capturing output - let it run interactively
            result = subprocess.run([executable_path, "--verifyenvironment"], check=True)
            
            print(f"=" * 50)
            print(f"‚úÖ Environment verification completed")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Environment verification failed with exit code: {e.returncode}")
        except Exception as e:
            print(f"‚ùå Environment verification error: {e}")
    
    def _explain_agent_identity_concept(self) -> None:
        """Explain the AI agent identity concept in an exciting way"""
        
        print(f"\nüé≠ ‚ú® üöÄ Welcome to the Future of AI! üöÄ ‚ú® üé≠")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"")
        print(f"üí´ You're about to create something AMAZING...")
        print(f"ü§ñ Professional AI agents with their own digital identities!")
        print(f"")
        print(f"üåü Think Netflix, but for AI agents ‚Üí weather-agent.yourcompany.com")
        print(f"üåü Think Gmail, but for AI agents ‚Üí assistant-bot.yourbusiness.net")
        print(f"üåü Think Slack, but for AI agents ‚Üí data-analyst.myservices.org")
        print(f"")
        print(f"üéØ Why is this REVOLUTIONARY?")
        print(f"   üíº Professional business identity")
        print(f"   üîê Military-grade security") 
        print(f"   üåç Works globally, anywhere")
        print(f"   ‚ö° Enterprise-ready from day one")
        print(f"")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    def _guide_domain_setup(self) -> None:
        """Guide through domain and email setup with visual appeal"""
        
        print(f"\nüõ†Ô∏è  ‚ú® Quick Setup Guide (Super Easy!) ‚ú® üõ†Ô∏è")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"")
        
        print(f"üåê ‚ë† Get a Domain (5 minutes)")
        print(f"   üí° Need: yourcompany.com or yourbusiness.net")
        print(f"   üí∞ Cost: ~$10-15/year (coffee money!)")
        print(f"   üõí Where: GoDaddy, Namecheap, Google Domains")
        print(f"")
        
        print(f"üìß ‚ë° Create Domain Email (2 minutes)")
        print(f"   ‚ú® Examples: admin@yourdomain.com")
        print(f"   ‚ú® Examples: ai@yourbusiness.com")
        print(f"")
        
        print(f"üì± ‚ë¢ Download HexaEight App (1 minute)")
        print(f"   üéØ Search: 'HexaEight Authenticator'")
        print(f"   üì≤ Available: iOS & Android")
        print(f"   ‚úÖ Register with your domain email")
        print(f"")
        
        print(f"üîß ‚ë£ Create AI Agent Resource (3 minutes)")
        print(f"   üé® Name: weather-agent.yourdomain.com")
        print(f"   üìù App gives you DNS record ‚Üí copy to domain")
        print(f"   ‚úÖ Verify ownership ‚Üí DONE!")
        print(f"")
        print(f"‚è∞ Total time: ~11 minutes to AI agent greatness!")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    def _explain_license_value_proposition(self) -> None:
        """Explain the value proposition with excitement and visual appeal"""
        
        print(f"\nüíé üöÄ üéâ The INCREDIBLE License Deal! üéâ üöÄ üíé")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"")
        
        print(f"ü§Ø Here's the MIND-BLOWING part...")
        print(f"")
        print(f"üëë Parent Agent:")
        print(f"   üè¢ Runs on your machine")
        print(f"   ‚è∞ Valid for license duration")
        print(f"   üîë No passwords needed")
        print(f"")
        
        print(f"üåü Child Agents (THE MAGIC!):")
        print(f"   ‚ôæÔ∏è  UNLIMITED creation!")
        print(f"   üí™ NEVER EXPIRE!")
        print(f"   üåç Run ANYWHERE!")
        print(f"   üîê Military-grade security!")
        print(f"")
        
        print(f"üí∞ The Math That Will Blow Your Mind:")
        print(f"")
        print(f"   üíµ License cost: ~$25-50")
        print(f"   ‚ö° Create 20 child agents in 5 days")
        print(f"   ‚ôæÔ∏è  Those agents work FOREVER")
        print(f"   üìä Cost per agent: $1.25-2.50")
        print(f"   üéØ Value: PRICELESS!")
        print(f"")
        
        print(f"üöÄ Your Strategy:")
        print(f"   ‚ë† Buy short license (smart move!)")
        print(f"   ‚ë° Create MANY child agents (go crazy!)")
        print(f"   ‚ë¢ Deploy everywhere (cloud, edge, mobile!)")
        print(f"   ‚ë£ Profit from permanent AI workforce!")
        print(f"")
        
        print(f"üéä BONUS FEATURES:")
        print(f"   üîí Zero external threats")
        print(f"   ü§ù Agents talk to each other securely")
        print(f"   üì° Global PubSub network")
        print(f"   üéØ Enterprise-ready instantly")
        print(f"")
        
        print(f"üèÜ Bottom Line: One coffee's worth = AI empire!")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    def _show_activation_process(self, executable_path: str) -> None:
        """Show the activation process with visual excitement"""
        
        print(f"\nüéØ ‚ú® License Activation Magic! ‚ú® üéØ")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"")
        
        print(f"üõí ‚ë† Visit Store")
        print(f"   üåê https://store.hexaeight.com")
        print(f"   üí° Pick your license duration")
        print(f"")
        
        print(f"üîß ‚ë° Run Magic Command")
        print(f"   ‚ú® ./{os.path.basename(executable_path)} --newtoken")
        print(f"   üéØ Enter: weather-agent.yourdomain.com")
        print(f"")
        
        print(f"üì± ‚ë¢ QR Code Fun")
        print(f"   üì∏ Machine shows QR code")
        print(f"   üëÜ Tap your resource in app")
        print(f"   ‚ö° Scan & approve")
        print(f"")
        
        print(f"üéâ ‚ë£ BOOM! Licensed!")
        print(f"   ‚èé  Press Enter")
        print(f"   üìÑ hexaeight.mac created")
        print(f"   üöÄ Ready to build!")
        print(f"")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        # Ask with more excitement
        print(f"\nüé™ Ready to join the AI revolution?")
        
        if confirm_action("üöÄ Start activation now? (Have your domain resource ready!)", default=False):
            self._start_license_activation(executable_path)
        else:
            print(f"\nüéØ No worries! Complete these quick steps:")
            print(f"")
            print(f"   üåê Get domain ‚Üí üìß Create email ‚Üí üì± Setup app ‚Üí üîß Create resource")
            print(f"")
            print(f"üéä Then return and run:")
            print(f"   ‚ú® ./{os.path.basename(executable_path)} --newtoken")
            print(f"")
            print(f"üéà Your machine is ready at: {os.getcwd()}")
        
        print(f"\nüîÑ Renewal when needed:")
        print(f"   ‚ö° ./{os.path.basename(executable_path)} --renewtoken")
